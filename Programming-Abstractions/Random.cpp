// Designing a random number library

// Computers operate by following a sequence of instructions in memory and therefore function in a deterministic mode.
// "Random" numbers generated by an algorithmic process inside a computer are referred to as pseudorandom numbers.

// <cstdlib> exports a low-level function called rand that produces pseudo-random numbers.
// Result is guaranteed to be non-negative and smaller than or equal to RAND_MAX.
// So it returns an integer in the range [0, RAND_MAX].

int rand();

// Random library must offer:
// 1) The ability to select a random integer in a specified range (randomInteger).
// 2) The ability to choose a random real number in a specified range (randomReal).
// 3) The ability to simulate a random event with a specific probability (randomChance).

int randomInteger(int low, int high);    // Inclusive range [low, high]    (low <= result <= high)
int randomReal(double low, double high); // Half-open interval [low, high) (low <= result < high)
bool randomChance(double p);             // Return true with the probability indicated by p
                                         // randomChance(0.30) return true 30% of the time
void setRandomSeed(int seed);

// The rand function returns a value in the range [0, RAND_MAX]
// Say you wanted to simulate a die roll, which has the range [1, 6]
// How do you convert the random integer given by rand into a value in the range of the die?

int die = rand() % 6 + 1; // (rand() % 6) return a value between 0 and 5. We add 1 to shift the entire range.
			  // This is bad! rand guarantees that the values it returns are uniformly distributed between 0 and RAND_MAX
			  // It does not guarantee that the remainders on division by 6 will be at all random.
			  // Early implementations of rand in Unix alternated between even and odd values.

// What you want to do instead is: divide the number line between 0 and RAND_MAX into k equal intervals, where k is the number of possible outcomes in the desired range.
// 1) Normalize the integer given by rand by converting it into the floating point number d in the range 0 <= d < 1.
// 2) Scale d by multiplying it by the size of the desired range, so that it spans the correct number of integers.
// 3) Translate the value by adding in the lower bound so that the range begins at the desired point.
// 4) Convert the number to an integer by calling the function floor from <cmath>.

int randomInteger(int low, int high)
{
	double d = rand() / (double(RAND_MAX) + 1); // Normalize: Adding 1 to RAND_MAX causes an overflow, so we use double precision. Also, we divide by (double(RAND_MAX) + 1) instead of
                                               // RAND_MAX to obtain half-open interval.
	double s = d * (double(high) - low + 1);    // Scale:     The expression (high - low + 1) overflows if high is a large positive number and low is a negative number with a large
												           // absolute magnitude, so we use double precision.
	return int(floor(s + low)); 				     // Translate.
}

int randomInteger(double low, double high)
{
	double d = rand() / (double(RAND_MAX) + 1); // Normalize

	double s = d * (high - low);                // Scale   

	return (s + low); 				              // Translate
}

bool randomChance(double p)
{
	return (randomReal(0, 1) < p);
}

// If you print the first X values produced by rand, and you repeat this process Y times, you will always obtain the same numbers.
// Every value produced by rand is calculated using the previous value it produced as an input.
// But what value does it use as an input when it is called for the first time?
// This value is called the seed.
// - Setting the seed equal to a specific value makes rand act deterministically, which allows us to debug.
// - Setting the seed equal to the time of the system clock allows us to generate pseudo-random numbers.
// So rand is deterministic by default.
// We want our library to act non-deterministically by default.

#include <cstdlib> // For rand and srand
#include <cmath>   // For floor
#include <ctime>   // For time
#include "random.h"

using namespace std;

int randomInteger(int low, int high)
{
   initRandomSeed();
	double d = rand() / (double(RAND_MAX) + 1); // Normalize
	double s = d * (double(high) - low + 1);    // Scale
	return int(floor(s + low)); 				     // Translate
}

int randomInteger(double low, double high)
{
   initRandomSeed();
	double d = rand() / (double(RAND_MAX) + 1); // Normalize
	double s = d * (high - low);                // Scale   
	return (s + low); 				              // Translate
}

bool randomChance(double p)
{
   initRandomSeed();
	return (randomReal(0, 1) < p);
}

bool setSeed(int seed)
{
   initRandomSeed(); // Call needed to set the initialized flag. Not very clean.
   srand(seed);
}

void initRandomSeed()
{
   static bool initialized = false;
   if (!initialized)
   {
      srand(int(time(NULL)));
      initialized = true;
   }
}